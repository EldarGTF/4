#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>

using namespace std;

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
struct Character {
    string name;
    int health;
    int attack;
    int defence;

    // –ê—Ç–∞–∫–∞ —Ü–µ–ª–∏ —Å —É—á–µ—Ç–æ–º –∑–∞—â–∏—Ç—ã
    void attackTarget(Character &target) {
        int damage = attack - target.defence;
        if (damage < 0) damage = 0;
        cout << name << " –∞—Ç–∞–∫—É–µ—Ç " << target.name << " –∏ –Ω–∞–Ω–æ—Å–∏—Ç " << damage << " —É—Ä–æ–Ω–∞.\n";
        target.health -= damage;
        if (target.health < 0) target.health = 0;
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—è
void printStatus(const Character &hero, const Character &monster) {
    cout << "\n--- –°—Ç–∞—Ç—É—Å —Å—Ä–∞–∂–µ–Ω–∏—è ---\n";
    cout << hero.name << " (–ó–¥–æ—Ä–æ–≤—å–µ: " << hero.health << ", –ó–∞—â–∏—Ç–∞: " << hero.defence << ")\n";
    cout << monster.name << " (–ó–¥–æ—Ä–æ–≤—å–µ: " << monster.health << ", –ó–∞—â–∏—Ç–∞: " << monster.defence << ")\n";
    cout << "-------------------------\n";
}

// –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞
void clearScreen() {
    #ifdef _WIN32
        system("cls");
    #else
        system("clear");
    #endif
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞
int getValidInput(int min, int max) {
    int choice;
    while (true) {
        cin >> choice;
        if (cin.fail() || choice < min || choice > max) {
            cin.clear();
            cin.ignore(1000, '\n');
            cout << "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: ";
        } else {
            break;
        }
    }
    return choice;
}

// –û—Å–Ω–æ–≤–Ω–æ–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
void battle() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    Character hero = {"–ì–µ—Ä–æ–π", 100, 20, 5};
    Character monster = {"–ú–æ–Ω—Å—Ç—Ä", 80, 15, 3};

    while (hero.health > 0 && monster.health > 0) {
        clearScreen();
        printStatus(hero, monster);

        // –•–æ–¥ –≥–µ—Ä–æ—è
        cout << "–í–∞—à —Ö–æ–¥:\n1. –ê—Ç–∞–∫–æ–≤–∞—Ç—å\n2. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ö–æ–¥\n–í—ã–±–æ—Ä: ";
        int choice = getValidInput(1, 2);
        if (choice == 1) {
            hero.attackTarget(monster);
        } else {
            cout << hero.name << " –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.\n";
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–æ–Ω—Å—Ç—Ä–∞
        if (monster.health <= 0) break;

        // –•–æ–¥ –º–æ–Ω—Å—Ç—Ä–∞ (—Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä)
        if (rand() % 2 == 0) {
            monster.attackTarget(hero);
        } else {
            cout << monster.name << " –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Ö–æ–¥.\n";
        }
    }

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –±–æ—è
    clearScreen();
    printStatus(hero, monster);
    if (hero.health > 0) {
        cout << "üéâ –ü–æ–±–µ–¥–∞! –ì–µ—Ä–æ–π –æ–¥–æ–ª–µ–ª –º–æ–Ω—Å—Ç—Ä–∞.\n";
    } else {
        cout << "üíÄ –ü–æ—Ä–∞–∂–µ–Ω–∏–µ... –ú–æ–Ω—Å—Ç—Ä –æ–∫–∞–∑–∞–ª—Å—è —Å–∏–ª—å–Ω–µ–µ.\n";
    }
}

int main() {
    srand(time(0));
    char playAgain;

    do {
        battle();
        cout << "–•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑? (y/n): ";
        cin >> playAgain;
    } while (playAgain == 'y');

    cout << "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É!\n";
    return 0;
}
